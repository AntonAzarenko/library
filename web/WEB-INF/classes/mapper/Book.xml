<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="library.dao.BookDao">

    <resultMap type="Book" id="bookmap">
        <id column="id" property="id"/>
        <result column="title" property="title"/>
        <result column="description" property="description"/>
        <association property="publisher" javaType="Publisher">
            <id property="id" column="publisher_id"/>
            <result property="name" column="publisher_name"/>
        </association>
        <collection property="author" ofType="author" javaType="ArrayList">
            <id property="id" column="author_id"/>
            <result property="name" column="author_name"/>
        </collection>
        <collection property="metadata" ofType="metadata" javaType="Metadata">
            <id property="id" column="metadata_id"/>
            <result property="url" column="url"/>
            <result property="picture" column="picture"/>
        </collection>
    </resultMap>

    <select id="find" resultMap="bookmap" parameterType="string">
		SELECT
		b.id,
		b.title,
		b.description,
		b.publisher_id,
		p.name as publisher_name,
		m.id as metadata_id,
		m.url as url,
		m.picture as picture,
		a.id AS author_id,
		a.name as author_name
		from authors_books as ab
		inner join books as b on ab.book_id = b.id
		inner join authors as a on ab.author_id=a.id
		inner join publishers p on b.publisher_id = p.id
		left join metadata m on b.id = m.book_id
		WHERE title = #{title}
		order by b.title
	</select>

    <select id="findByAuthorId" parameterType="long"
            resultMap="bookmap">
		SELECT
		b.id,
		b.title,
		b.description,
		b.publisher_id,
		p.name as publisher_name,
		a.id AS author_id,
		a.name as author_name
		from authors_books as ab
		inner join books as b on ab.book_id = b.id
		inner join authors as a on ab.author_id=a.id
		inner join publishers p on b.publisher_id = p.id
		WHERE
		a.id = #{id}
		order by b.title
	</select>

    <select id="findBooksByPublisher" parameterType="string"
            resultMap="bookmap">
		SELECT
		b.id,
		b.title,
		b.description,
		b.publisher_id,
		p.name as publisher_name,
		a.id AS author_id,
		a.name as author_name
		from authors_books as ab
		inner join books as b on ab.book_id = b.id
		inner join authors as a on ab.author_id=a.id
		inner join publishers p on b.publisher_id = p.id
		where p.name like #{name}
		order by b.title
	</select>

    <select id="findAll" resultMap="bookmap">
		SELECT
		b.id,
		b.title,
		b.description,
		b.publisher_id,
		p.name as publisher_name,
		m.id as metadata_id,
		m.url as url,
		m.picture as picture,
		a.id AS author_id,
		a.name as author_name
		from authors_books as ab
		inner join books as b on ab.book_id = b.id
		inner join authors as a on ab.author_id=a.id
		inner join publishers p on b.publisher_id = p.id
		left join metadata m on b.id = m.book_id
		order by b.title
	</select>


    <insert id="create" parameterType="Book" useGeneratedKeys="true"
            keyProperty="id">
        <selectKey keyProperty="id" resultType="long" order="BEFORE">
            SELECT nextVal('books_id_seq')
        </selectKey>
		INSERT INTO books (id,title, description, publisher_id) VALUES
		(#{id},#{title}, #{description}, #{publisher.id})
	</insert>

    <insert id="createAuthors_books">
        insert into authors_books (author_id, book_id) values
        <foreach collection="author" item="auth" index="index" separator=",">
            ( #{auth.id}, #{id} )
        </foreach>
    </insert>

    <select id="read" resultMap="bookmap" parameterType="long">
		SELECT
		b.id,
		b.title,
		b.description,
		b.publisher_id,
		p.name as publisher_name,
		m.id as metadata_id,
		m.url as url,
		m.picture as picture,
		a.id AS author_id,
		a.name as author_name
		from authors_books as ab
		inner join books as b on ab.book_id = b.id
		inner join authors as a on ab.author_id=a.id
		inner join publishers p on b.publisher_id = p.id
		left join metadata m on b.id = m.book_id
		WHERE b.id = #{id}
	</select>

    <update id="update" parameterType="Book">
        UPDATE books SET title = #{title}, description=#{description}, publisher_id =
        #{publisher.id} WHERE id = #{id}
    </update>

    <delete id="deleteAuthors_books">
        <foreach collection="author" item="auth" index="index" separator=";">
            DELETE from authors_books where book_id=#{id}
        </foreach>
    </delete>

    <delete id="delete" parameterType="long">
		DELETE FROM books WHERE id = #{id}
	</delete>




    <select id="search" resultMap="bookmap" parameterType="map">
        SELECT
            b.id,
            b.title,
            b.description,
            b.publisher_id,
            p.name as publisher_name,
            a.id AS author_id,
            a.name as author_name
        FROM books b
        JOIN authors_books ab ON ab.book_id = b.id
        JOIN authors a ON ab.author_id = a.id
        JOIN publishers p on b.publisher_id = p.id
        WHERE upper(b.title) LIKE upper(#{book})
        	AND upper(a.name) LIKE upper(#{author})
        	AND upper(a.name) LIKE upper(#{publisher})
        order by b.title
    </select>

</mapper>